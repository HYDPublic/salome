# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _hexablock_swig
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _hexablock_swig.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _hexablock_swig.PySwigIterator_value(*args)
    def incr(*args): return _hexablock_swig.PySwigIterator_incr(*args)
    def decr(*args): return _hexablock_swig.PySwigIterator_decr(*args)
    def distance(*args): return _hexablock_swig.PySwigIterator_distance(*args)
    def equal(*args): return _hexablock_swig.PySwigIterator_equal(*args)
    def copy(*args): return _hexablock_swig.PySwigIterator_copy(*args)
    def next(*args): return _hexablock_swig.PySwigIterator_next(*args)
    def previous(*args): return _hexablock_swig.PySwigIterator_previous(*args)
    def advance(*args): return _hexablock_swig.PySwigIterator_advance(*args)
    def __eq__(*args): return _hexablock_swig.PySwigIterator___eq__(*args)
    def __ne__(*args): return _hexablock_swig.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _hexablock_swig.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _hexablock_swig.PySwigIterator___isub__(*args)
    def __add__(*args): return _hexablock_swig.PySwigIterator___add__(*args)
    def __sub__(*args): return _hexablock_swig.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _hexablock_swig.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VectorHexas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorHexas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorHexas, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorHexas_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorHexas___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorHexas___len__(*args)
    def pop(*args): return _hexablock_swig.VectorHexas_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorHexas___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorHexas___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorHexas___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorHexas___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorHexas___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorHexas___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorHexas_append(*args)
    def empty(*args): return _hexablock_swig.VectorHexas_empty(*args)
    def size(*args): return _hexablock_swig.VectorHexas_size(*args)
    def clear(*args): return _hexablock_swig.VectorHexas_clear(*args)
    def swap(*args): return _hexablock_swig.VectorHexas_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorHexas_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorHexas_begin(*args)
    def end(*args): return _hexablock_swig.VectorHexas_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorHexas_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorHexas_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorHexas_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorHexas_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorHexas(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorHexas_push_back(*args)
    def front(*args): return _hexablock_swig.VectorHexas_front(*args)
    def back(*args): return _hexablock_swig.VectorHexas_back(*args)
    def assign(*args): return _hexablock_swig.VectorHexas_assign(*args)
    def resize(*args): return _hexablock_swig.VectorHexas_resize(*args)
    def insert(*args): return _hexablock_swig.VectorHexas_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorHexas_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorHexas_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorHexas
    __del__ = lambda self : None;
VectorHexas_swigregister = _hexablock_swig.VectorHexas_swigregister
VectorHexas_swigregister(VectorHexas)

class VectorQuads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorQuads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorQuads, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorQuads_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorQuads___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorQuads___len__(*args)
    def pop(*args): return _hexablock_swig.VectorQuads_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorQuads___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorQuads___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorQuads___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorQuads___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorQuads___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorQuads___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorQuads_append(*args)
    def empty(*args): return _hexablock_swig.VectorQuads_empty(*args)
    def size(*args): return _hexablock_swig.VectorQuads_size(*args)
    def clear(*args): return _hexablock_swig.VectorQuads_clear(*args)
    def swap(*args): return _hexablock_swig.VectorQuads_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorQuads_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorQuads_begin(*args)
    def end(*args): return _hexablock_swig.VectorQuads_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorQuads_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorQuads_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorQuads_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorQuads_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorQuads(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorQuads_push_back(*args)
    def front(*args): return _hexablock_swig.VectorQuads_front(*args)
    def back(*args): return _hexablock_swig.VectorQuads_back(*args)
    def assign(*args): return _hexablock_swig.VectorQuads_assign(*args)
    def resize(*args): return _hexablock_swig.VectorQuads_resize(*args)
    def insert(*args): return _hexablock_swig.VectorQuads_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorQuads_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorQuads_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorQuads
    __del__ = lambda self : None;
VectorQuads_swigregister = _hexablock_swig.VectorQuads_swigregister
VectorQuads_swigregister(VectorQuads)

class VectorEdges(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorEdges, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorEdges, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorEdges_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorEdges___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorEdges___len__(*args)
    def pop(*args): return _hexablock_swig.VectorEdges_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorEdges___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorEdges___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorEdges___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorEdges___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorEdges___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorEdges___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorEdges_append(*args)
    def empty(*args): return _hexablock_swig.VectorEdges_empty(*args)
    def size(*args): return _hexablock_swig.VectorEdges_size(*args)
    def clear(*args): return _hexablock_swig.VectorEdges_clear(*args)
    def swap(*args): return _hexablock_swig.VectorEdges_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorEdges_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorEdges_begin(*args)
    def end(*args): return _hexablock_swig.VectorEdges_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorEdges_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorEdges_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorEdges_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorEdges_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorEdges(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorEdges_push_back(*args)
    def front(*args): return _hexablock_swig.VectorEdges_front(*args)
    def back(*args): return _hexablock_swig.VectorEdges_back(*args)
    def assign(*args): return _hexablock_swig.VectorEdges_assign(*args)
    def resize(*args): return _hexablock_swig.VectorEdges_resize(*args)
    def insert(*args): return _hexablock_swig.VectorEdges_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorEdges_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorEdges_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorEdges
    __del__ = lambda self : None;
VectorEdges_swigregister = _hexablock_swig.VectorEdges_swigregister
VectorEdges_swigregister(VectorEdges)

class VectorVertices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVertices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVertices, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorVertices_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorVertices___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorVertices___len__(*args)
    def pop(*args): return _hexablock_swig.VectorVertices_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorVertices___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorVertices___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorVertices___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorVertices___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorVertices___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorVertices___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorVertices_append(*args)
    def empty(*args): return _hexablock_swig.VectorVertices_empty(*args)
    def size(*args): return _hexablock_swig.VectorVertices_size(*args)
    def clear(*args): return _hexablock_swig.VectorVertices_clear(*args)
    def swap(*args): return _hexablock_swig.VectorVertices_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorVertices_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorVertices_begin(*args)
    def end(*args): return _hexablock_swig.VectorVertices_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorVertices_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorVertices_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorVertices_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorVertices_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorVertices(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorVertices_push_back(*args)
    def front(*args): return _hexablock_swig.VectorVertices_front(*args)
    def back(*args): return _hexablock_swig.VectorVertices_back(*args)
    def assign(*args): return _hexablock_swig.VectorVertices_assign(*args)
    def resize(*args): return _hexablock_swig.VectorVertices_resize(*args)
    def insert(*args): return _hexablock_swig.VectorVertices_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorVertices_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorVertices_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorVertices
    __del__ = lambda self : None;
VectorVertices_swigregister = _hexablock_swig.VectorVertices_swigregister
VectorVertices_swigregister(VectorVertices)

class VectorShapes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorShapes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorShapes, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorShapes_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorShapes___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorShapes___len__(*args)
    def pop(*args): return _hexablock_swig.VectorShapes_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorShapes___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorShapes___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorShapes___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorShapes___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorShapes___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorShapes___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorShapes_append(*args)
    def empty(*args): return _hexablock_swig.VectorShapes_empty(*args)
    def size(*args): return _hexablock_swig.VectorShapes_size(*args)
    def clear(*args): return _hexablock_swig.VectorShapes_clear(*args)
    def swap(*args): return _hexablock_swig.VectorShapes_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorShapes_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorShapes_begin(*args)
    def end(*args): return _hexablock_swig.VectorShapes_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorShapes_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorShapes_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorShapes_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorShapes_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorShapes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorShapes_push_back(*args)
    def front(*args): return _hexablock_swig.VectorShapes_front(*args)
    def back(*args): return _hexablock_swig.VectorShapes_back(*args)
    def assign(*args): return _hexablock_swig.VectorShapes_assign(*args)
    def resize(*args): return _hexablock_swig.VectorShapes_resize(*args)
    def insert(*args): return _hexablock_swig.VectorShapes_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorShapes_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorShapes_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorShapes
    __del__ = lambda self : None;
VectorShapes_swigregister = _hexablock_swig.VectorShapes_swigregister
VectorShapes_swigregister(VectorShapes)

class VectorReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorReal, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorReal_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorReal___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorReal___len__(*args)
    def pop(*args): return _hexablock_swig.VectorReal_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorReal___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorReal___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorReal___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorReal___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorReal___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorReal___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorReal_append(*args)
    def empty(*args): return _hexablock_swig.VectorReal_empty(*args)
    def size(*args): return _hexablock_swig.VectorReal_size(*args)
    def clear(*args): return _hexablock_swig.VectorReal_clear(*args)
    def swap(*args): return _hexablock_swig.VectorReal_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorReal_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorReal_begin(*args)
    def end(*args): return _hexablock_swig.VectorReal_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorReal_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorReal_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorReal_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorReal_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorReal(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorReal_push_back(*args)
    def front(*args): return _hexablock_swig.VectorReal_front(*args)
    def back(*args): return _hexablock_swig.VectorReal_back(*args)
    def assign(*args): return _hexablock_swig.VectorReal_assign(*args)
    def resize(*args): return _hexablock_swig.VectorReal_resize(*args)
    def insert(*args): return _hexablock_swig.VectorReal_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorReal_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorReal_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorReal
    __del__ = lambda self : None;
VectorReal_swigregister = _hexablock_swig.VectorReal_swigregister
VectorReal_swigregister(VectorReal)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(*args): return _hexablock_swig.VectorInt_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _hexablock_swig.VectorInt___nonzero__(*args)
    def __len__(*args): return _hexablock_swig.VectorInt___len__(*args)
    def pop(*args): return _hexablock_swig.VectorInt_pop(*args)
    def __getslice__(*args): return _hexablock_swig.VectorInt___getslice__(*args)
    def __setslice__(*args): return _hexablock_swig.VectorInt___setslice__(*args)
    def __delslice__(*args): return _hexablock_swig.VectorInt___delslice__(*args)
    def __delitem__(*args): return _hexablock_swig.VectorInt___delitem__(*args)
    def __getitem__(*args): return _hexablock_swig.VectorInt___getitem__(*args)
    def __setitem__(*args): return _hexablock_swig.VectorInt___setitem__(*args)
    def append(*args): return _hexablock_swig.VectorInt_append(*args)
    def empty(*args): return _hexablock_swig.VectorInt_empty(*args)
    def size(*args): return _hexablock_swig.VectorInt_size(*args)
    def clear(*args): return _hexablock_swig.VectorInt_clear(*args)
    def swap(*args): return _hexablock_swig.VectorInt_swap(*args)
    def get_allocator(*args): return _hexablock_swig.VectorInt_get_allocator(*args)
    def begin(*args): return _hexablock_swig.VectorInt_begin(*args)
    def end(*args): return _hexablock_swig.VectorInt_end(*args)
    def rbegin(*args): return _hexablock_swig.VectorInt_rbegin(*args)
    def rend(*args): return _hexablock_swig.VectorInt_rend(*args)
    def pop_back(*args): return _hexablock_swig.VectorInt_pop_back(*args)
    def erase(*args): return _hexablock_swig.VectorInt_erase(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _hexablock_swig.VectorInt_push_back(*args)
    def front(*args): return _hexablock_swig.VectorInt_front(*args)
    def back(*args): return _hexablock_swig.VectorInt_back(*args)
    def assign(*args): return _hexablock_swig.VectorInt_assign(*args)
    def resize(*args): return _hexablock_swig.VectorInt_resize(*args)
    def insert(*args): return _hexablock_swig.VectorInt_insert(*args)
    def reserve(*args): return _hexablock_swig.VectorInt_reserve(*args)
    def capacity(*args): return _hexablock_swig.VectorInt_capacity(*args)
    __swig_destroy__ = _hexablock_swig.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _hexablock_swig.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

HOK = _hexablock_swig.HOK
HERR = _hexablock_swig.HERR
NOTHING = _hexablock_swig.NOTHING
EOL = _hexablock_swig.EOL
EOS = _hexablock_swig.EOS
CHVIDE = _hexablock_swig.CHVIDE
ZEROR = _hexablock_swig.ZEROR
UNR = _hexablock_swig.UNR
DEMI = _hexablock_swig.DEMI
DIM2 = _hexablock_swig.DIM2
M_PI = _hexablock_swig.M_PI
Degre2Radian = _hexablock_swig.Degre2Radian
dir_x = _hexablock_swig.dir_x
dir_y = _hexablock_swig.dir_y
dir_z = _hexablock_swig.dir_z
DIM3 = _hexablock_swig.DIM3
EL_NONE = _hexablock_swig.EL_NONE
EL_VERTEX = _hexablock_swig.EL_VERTEX
EL_EDGE = _hexablock_swig.EL_EDGE
EL_QUAD = _hexablock_swig.EL_QUAD
EL_HEXA = _hexablock_swig.EL_HEXA
EL_VECTOR = _hexablock_swig.EL_VECTOR
EL_GRID = _hexablock_swig.EL_GRID
EL_CYLINDER = _hexablock_swig.EL_CYLINDER
EL_PIPE = _hexablock_swig.EL_PIPE
EL_GROUP = _hexablock_swig.EL_GROUP
EL_LAW = _hexablock_swig.EL_LAW
EL_SHAPE = _hexablock_swig.EL_SHAPE
EL_SUBSHAPE = _hexablock_swig.EL_SUBSHAPE
EL_PROPAGATION = _hexablock_swig.EL_PROPAGATION
EL_DOCU = _hexablock_swig.EL_DOCU
EL_REMOVED = _hexablock_swig.EL_REMOVED
EL_MAXI = _hexablock_swig.EL_MAXI
HexaCell = _hexablock_swig.HexaCell
QuadCell = _hexablock_swig.QuadCell
EdgeCell = _hexablock_swig.EdgeCell
HexaNode = _hexablock_swig.HexaNode
QuadNode = _hexablock_swig.QuadNode
EdgeNode = _hexablock_swig.EdgeNode
VertexNode = _hexablock_swig.VertexNode
SH_NONE = _hexablock_swig.SH_NONE
SH_IMPORT = _hexablock_swig.SH_IMPORT
SH_CYLINDER = _hexablock_swig.SH_CYLINDER
SH_INTER = _hexablock_swig.SH_INTER
SH_SPHERE = _hexablock_swig.SH_SPHERE
SH_CLOUD = _hexablock_swig.SH_CLOUD
SH_EXTRUD = _hexablock_swig.SH_EXTRUD
CYL_NOFILL = _hexablock_swig.CYL_NOFILL
CYL_CL4 = _hexablock_swig.CYL_CL4
CYL_CL6 = _hexablock_swig.CYL_CL6
CYL_CLOSED = _hexablock_swig.CYL_CLOSED
CYL_PEER = _hexablock_swig.CYL_PEER
CYL_ODD = _hexablock_swig.CYL_ODD
GR_NONE = _hexablock_swig.GR_NONE
GR_CARTESIAN = _hexablock_swig.GR_CARTESIAN
GR_CYLINDRIC = _hexablock_swig.GR_CYLINDRIC
GR_SPHERIC = _hexablock_swig.GR_SPHERIC
GR_JOINT = _hexablock_swig.GR_JOINT
GR_BICYL = _hexablock_swig.GR_BICYL
GR_BIPIPE = _hexablock_swig.GR_BIPIPE
GR_REPLACE = _hexablock_swig.GR_REPLACE
GR_HEMISPHERIC = _hexablock_swig.GR_HEMISPHERIC
GR_RIND = _hexablock_swig.GR_RIND
GR_PART_SPHERIC = _hexablock_swig.GR_PART_SPHERIC
GR_PART_RIND = _hexablock_swig.GR_PART_RIND
S_E = _hexablock_swig.S_E
S_NE = _hexablock_swig.S_NE
S_N = _hexablock_swig.S_N
S_NW = _hexablock_swig.S_NW
S_W = _hexablock_swig.S_W
S_SW = _hexablock_swig.S_SW
S_S = _hexablock_swig.S_S
S_SE = _hexablock_swig.S_SE
S_MAXI = _hexablock_swig.S_MAXI
Uniform = _hexablock_swig.Uniform
Arithmetic = _hexablock_swig.Arithmetic
Geometric = _hexablock_swig.Geometric
OR_FRONT = _hexablock_swig.OR_FRONT
OR_LEFT = _hexablock_swig.OR_LEFT
OR_RIGHT = _hexablock_swig.OR_RIGHT
OR_BACK = _hexablock_swig.OR_BACK
IS_NONE = _hexablock_swig.IS_NONE
IS_MARRIED = _hexablock_swig.IS_MARRIED
NO_COUNTED = _hexablock_swig.NO_COUNTED
NO_USED = _hexablock_swig.NO_USED
IS_USED = _hexablock_swig.IS_USED
V_AMONT = _hexablock_swig.V_AMONT
V_AVAL = _hexablock_swig.V_AVAL
V_TWO = _hexablock_swig.V_TWO
E_A = _hexablock_swig.E_A
E_B = _hexablock_swig.E_B
E_C = _hexablock_swig.E_C
E_D = _hexablock_swig.E_D
QUAD4 = _hexablock_swig.QUAD4
Q_A = _hexablock_swig.Q_A
Q_B = _hexablock_swig.Q_B
Q_C = _hexablock_swig.Q_C
Q_D = _hexablock_swig.Q_D
Q_E = _hexablock_swig.Q_E
Q_F = _hexablock_swig.Q_F
HQ_MAXI = _hexablock_swig.HQ_MAXI
E_AC = _hexablock_swig.E_AC
E_AD = _hexablock_swig.E_AD
E_BC = _hexablock_swig.E_BC
E_BD = _hexablock_swig.E_BD
E_AE = _hexablock_swig.E_AE
E_AF = _hexablock_swig.E_AF
E_BE = _hexablock_swig.E_BE
E_BF = _hexablock_swig.E_BF
E_CE = _hexablock_swig.E_CE
E_CF = _hexablock_swig.E_CF
E_DE = _hexablock_swig.E_DE
E_DF = _hexablock_swig.E_DF
HE_MAXI = _hexablock_swig.HE_MAXI
V_ACE = _hexablock_swig.V_ACE
V_ACF = _hexablock_swig.V_ACF
V_ADE = _hexablock_swig.V_ADE
V_ADF = _hexablock_swig.V_ADF
V_BCE = _hexablock_swig.V_BCE
V_BCF = _hexablock_swig.V_BCF
V_BDE = _hexablock_swig.V_BDE
V_BDF = _hexablock_swig.V_BDF
HV_MAXI = _hexablock_swig.HV_MAXI
Q_INSIDE = _hexablock_swig.Q_INSIDE
Q_DIRECT = _hexablock_swig.Q_DIRECT
Q_INVERSE = _hexablock_swig.Q_INVERSE
Q_UNDEFINED = _hexablock_swig.Q_UNDEFINED
Q_WAITING = _hexablock_swig.Q_WAITING
KS_Line = _hexablock_swig.KS_Line
KS_Circle = _hexablock_swig.KS_Circle
KS_Ellipse = _hexablock_swig.KS_Ellipse
KS_Hyperbola = _hexablock_swig.KS_Hyperbola
KS_Parabola = _hexablock_swig.KS_Parabola
KS_BezierCurve = _hexablock_swig.KS_BezierCurve
KS_BSplineCurve = _hexablock_swig.KS_BSplineCurve
KS_OtherCurve = _hexablock_swig.KS_OtherCurve
KS_None = _hexablock_swig.KS_None
CylSmall = _hexablock_swig.CylSmall
CylBig = _hexablock_swig.CylBig
NxInt = _hexablock_swig.NxInt
NxExt = _hexablock_swig.NxExt
get_temp_name = _hexablock_swig.get_temp_name
prod_scalaire = _hexablock_swig.prod_scalaire
prod_vectoriel = _hexablock_swig.prod_vectoriel
prod_mixte = _hexablock_swig.prod_mixte
deg2radians = _hexablock_swig.deg2radians
rad2degres = _hexablock_swig.rad2degres
calc_norme = _hexablock_swig.calc_norme
calc_distance = _hexablock_swig.calc_distance
calc_d2 = _hexablock_swig.calc_d2
calc_vecteur = _hexablock_swig.calc_vecteur
copy_vecteur = _hexablock_swig.copy_vecteur
calc_milieu = _hexablock_swig.calc_milieu
normer_vecteur = _hexablock_swig.normer_vecteur
carre = _hexablock_swig.carre
on_debug = _hexablock_swig.on_debug
in_test = _hexablock_swig.in_test
niv_debug = _hexablock_swig.niv_debug
set_minus = _hexablock_swig.set_minus
special_option = _hexablock_swig.special_option
set_special_option = _hexablock_swig.set_special_option
sizeof_file = _hexablock_swig.sizeof_file
read_file = _hexablock_swig.read_file
get_time = _hexablock_swig.get_time
make_basename = _hexablock_swig.make_basename
class EltBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EltBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EltBase, name)
    __repr__ = _swig_repr
    def countHexa(*args): return _hexablock_swig.EltBase_countHexa(*args)
    def countQuad(*args): return _hexablock_swig.EltBase_countQuad(*args)
    def countEdge(*args): return _hexablock_swig.EltBase_countEdge(*args)
    def countVertex(*args): return _hexablock_swig.EltBase_countVertex(*args)
    def setError(*args): return _hexablock_swig.EltBase_setError(*args)
    def getError(*args): return _hexablock_swig.EltBase_getError(*args)
    def isValid(*args): return _hexablock_swig.EltBase_isValid(*args)
    def isBad(*args): return _hexablock_swig.EltBase_isBad(*args)
    def duplicate(*args): return _hexablock_swig.EltBase_duplicate(*args)
    def clearAssociation(*args): return _hexablock_swig.EltBase_clearAssociation(*args)
    def replaceEdge(*args): return _hexablock_swig.EltBase_replaceEdge(*args)
    def replaceVertex(*args): return _hexablock_swig.EltBase_replaceVertex(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_EltBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_EltBase
    __del__ = lambda self : None;
    def remove(*args): return _hexablock_swig.EltBase_remove(*args)
    def suppress(*args): return _hexablock_swig.EltBase_suppress(*args)
    def dump(*args): return _hexablock_swig.EltBase_dump(*args)
    def saveXml(*args): return _hexablock_swig.EltBase_saveXml(*args)
    def majReferences(*args): return _hexablock_swig.EltBase_majReferences(*args)
    def makeVarName(*args): return _hexablock_swig.EltBase_makeVarName(*args)
    __swig_getmethods__["makeName"] = lambda x: _hexablock_swig.EltBase_makeName
    if _newclass:makeName = staticmethod(_hexablock_swig.EltBase_makeName)
    def next(*args): return _hexablock_swig.EltBase_next(*args)
    def setNext(*args): return _hexablock_swig.EltBase_setNext(*args)
    def getId(*args): return _hexablock_swig.EltBase_getId(*args)
    def setId(*args): return _hexablock_swig.EltBase_setId(*args)
    def dad(*args): return _hexablock_swig.EltBase_dad(*args)
    def getType(*args): return _hexablock_swig.EltBase_getType(*args)
    def isHere(*args): return _hexablock_swig.EltBase_isHere(*args)
    def isDeleted(*args): return _hexablock_swig.EltBase_isDeleted(*args)
    def razReferences(*args): return _hexablock_swig.EltBase_razReferences(*args)
    def addParent(*args): return _hexablock_swig.EltBase_addParent(*args)
    def getNbrParents(*args): return _hexablock_swig.EltBase_getNbrParents(*args)
    def hasParents(*args): return _hexablock_swig.EltBase_hasParents(*args)
    def getFather(*args): return _hexablock_swig.EltBase_getFather(*args)
    def getMark(*args): return _hexablock_swig.EltBase_getMark(*args)
    def setMark(*args): return _hexablock_swig.EltBase_setMark(*args)
    def printName(*args): return _hexablock_swig.EltBase_printName(*args)
    def dumpRef(*args): return _hexablock_swig.EltBase_dumpRef(*args)
    def getName(*args): return _hexablock_swig.EltBase_getName(*args)
    def setName(*args): return _hexablock_swig.EltBase_setName(*args)
    def debug(*args): return _hexablock_swig.EltBase_debug(*args)
    def isAssociated(*args): return _hexablock_swig.EltBase_isAssociated(*args)
    def getNextName(*args): return _hexablock_swig.EltBase_getNextName(*args)
EltBase_swigregister = _hexablock_swig.EltBase_swigregister
EltBase_swigregister(EltBase)
cvar = _hexablock_swig.cvar
ABR_TYPES = cvar.ABR_TYPES
fatal_error = _hexablock_swig.fatal_error
same_coords = _hexablock_swig.same_coords
requals = _hexablock_swig.requals
Epsil = cvar.Epsil
UnEpsil = cvar.UnEpsil
Epsil2 = cvar.Epsil2
EltBase_makeName = _hexablock_swig.EltBase_makeName

class Vertex(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    def getX(*args): return _hexablock_swig.Vertex_getX(*args)
    def getY(*args): return _hexablock_swig.Vertex_getY(*args)
    def getZ(*args): return _hexablock_swig.Vertex_getZ(*args)
    def setX(*args): return _hexablock_swig.Vertex_setX(*args)
    def setY(*args): return _hexablock_swig.Vertex_setY(*args)
    def setZ(*args): return _hexablock_swig.Vertex_setZ(*args)
    def getAssoX(*args): return _hexablock_swig.Vertex_getAssoX(*args)
    def getAssoY(*args): return _hexablock_swig.Vertex_getAssoY(*args)
    def getAssoZ(*args): return _hexablock_swig.Vertex_getAssoZ(*args)
    def setAssociation(*args): return _hexablock_swig.Vertex_setAssociation(*args)
    def clearAssociation(*args): return _hexablock_swig.Vertex_clearAssociation(*args)
    def setColor(*args): return _hexablock_swig.Vertex_setColor(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vertex
    __del__ = lambda self : None;
Vertex_swigregister = _hexablock_swig.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def getVertex(*args): return _hexablock_swig.Edge_getVertex(*args)
    def addAssociation(*args): return _hexablock_swig.Edge_addAssociation(*args)
    def setAssociation(*args): return _hexablock_swig.Edge_setAssociation(*args)
    def findAssociation(*args): return _hexablock_swig.Edge_findAssociation(*args)
    def clearAssociation(*args): return _hexablock_swig.Edge_clearAssociation(*args)
    def setColor(*args): return _hexablock_swig.Edge_setColor(*args)
    def getWay(*args): return _hexablock_swig.Edge_getWay(*args)
    def getLength(*args): return _hexablock_swig.Edge_getLength(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _hexablock_swig.Edge_swigregister
Edge_swigregister(Edge)

class Quad(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr
    def getEdge(*args): return _hexablock_swig.Quad_getEdge(*args)
    def getVertex(*args): return _hexablock_swig.Quad_getVertex(*args)
    def addAssociation(*args): return _hexablock_swig.Quad_addAssociation(*args)
    def clearAssociation(*args): return _hexablock_swig.Quad_clearAssociation(*args)
    def setColor(*args): return _hexablock_swig.Quad_setColor(*args)
    def nearestVertex(*args): return _hexablock_swig.Quad_nearestVertex(*args)
    def getCenter(*args): return _hexablock_swig.Quad_getCenter(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Quad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Quad
    __del__ = lambda self : None;
Quad_swigregister = _hexablock_swig.Quad_swigregister
Quad_swigregister(Quad)

class Hexa(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hexa, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hexa, name)
    __repr__ = _swig_repr
    def getQuad(*args): return _hexablock_swig.Hexa_getQuad(*args)
    def getEdge(*args): return _hexablock_swig.Hexa_getEdge(*args)
    def getVertex(*args): return _hexablock_swig.Hexa_getVertex(*args)
    def setColor(*args): return _hexablock_swig.Hexa_setColor(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Hexa(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hexa
    __del__ = lambda self : None;
Hexa_swigregister = _hexablock_swig.Hexa_swigregister
Hexa_swigregister(Hexa)

class Vector(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def getDx(*args): return _hexablock_swig.Vector_getDx(*args)
    def getDy(*args): return _hexablock_swig.Vector_getDy(*args)
    def getDz(*args): return _hexablock_swig.Vector_getDz(*args)
    def getNorm(*args): return _hexablock_swig.Vector_getNorm(*args)
    def getAngleX(*args): return _hexablock_swig.Vector_getAngleX(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = _hexablock_swig.Vector_swigregister
Vector_swigregister(Vector)

class Document(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hexablock_swig.new_Document(*args)
        try: self.this.append(this)
        except: self.this = this
    def dump(*args): return _hexablock_swig.Document_dump(*args)
    def setName(*args): return _hexablock_swig.Document_setName(*args)
    def setLevel(*args): return _hexablock_swig.Document_setLevel(*args)
    def save(*args): return _hexablock_swig.Document_save(*args)
    def saveVtk(*args): return _hexablock_swig.Document_saveVtk(*args)
    def purge(*args): return _hexablock_swig.Document_purge(*args)
    def setTolerance(*args): return _hexablock_swig.Document_setTolerance(*args)
    def getTolerance(*args): return _hexablock_swig.Document_getTolerance(*args)
    def addVertex(*args): return _hexablock_swig.Document_addVertex(*args)
    def addEdge(*args): return _hexablock_swig.Document_addEdge(*args)
    def addEdgeVector(*args): return _hexablock_swig.Document_addEdgeVector(*args)
    def addQuad(*args): return _hexablock_swig.Document_addQuad(*args)
    def addQuadVertices(*args): return _hexablock_swig.Document_addQuadVertices(*args)
    def addHexa(*args): return _hexablock_swig.Document_addHexa(*args)
    def addHexaVertices(*args): return _hexablock_swig.Document_addHexaVertices(*args)
    def addHexa2Quads(*args): return _hexablock_swig.Document_addHexa2Quads(*args)
    def addHexa3Quads(*args): return _hexablock_swig.Document_addHexa3Quads(*args)
    def addHexa4Quads(*args): return _hexablock_swig.Document_addHexa4Quads(*args)
    def addHexa5Quads(*args): return _hexablock_swig.Document_addHexa5Quads(*args)
    def addVector(*args): return _hexablock_swig.Document_addVector(*args)
    def addVectorVertices(*args): return _hexablock_swig.Document_addVectorVertices(*args)
    def addLaws(*args): return _hexablock_swig.Document_addLaws(*args)
    def addHexaGroup(*args): return _hexablock_swig.Document_addHexaGroup(*args)
    def addQuadGroup(*args): return _hexablock_swig.Document_addQuadGroup(*args)
    def addQuadNodeGroup(*args): return _hexablock_swig.Document_addQuadNodeGroup(*args)
    def addHexaNodeGroup(*args): return _hexablock_swig.Document_addHexaNodeGroup(*args)
    def addEdgeGroup(*args): return _hexablock_swig.Document_addEdgeGroup(*args)
    def addEdgeNodeGroup(*args): return _hexablock_swig.Document_addEdgeNodeGroup(*args)
    def addVertexNodeGroup(*args): return _hexablock_swig.Document_addVertexNodeGroup(*args)
    def makeTranslation(*args): return _hexablock_swig.Document_makeTranslation(*args)
    def makeScale(*args): return _hexablock_swig.Document_makeScale(*args)
    def makeRotation(*args): return _hexablock_swig.Document_makeRotation(*args)
    def makeSymmetryPoint(*args): return _hexablock_swig.Document_makeSymmetryPoint(*args)
    def makeSymmetryLine(*args): return _hexablock_swig.Document_makeSymmetryLine(*args)
    def makeSymmetryPlane(*args): return _hexablock_swig.Document_makeSymmetryPlane(*args)
    def performTranslation(*args): return _hexablock_swig.Document_performTranslation(*args)
    def performScale(*args): return _hexablock_swig.Document_performScale(*args)
    def performRotation(*args): return _hexablock_swig.Document_performRotation(*args)
    def performSymmetryPoint(*args): return _hexablock_swig.Document_performSymmetryPoint(*args)
    def performSymmetryLine(*args): return _hexablock_swig.Document_performSymmetryLine(*args)
    def performSymmetryPlane(*args): return _hexablock_swig.Document_performSymmetryPlane(*args)
    def disconnectQuad(*args): return _hexablock_swig.Document_disconnectQuad(*args)
    def disconnectEdge(*args): return _hexablock_swig.Document_disconnectEdge(*args)
    def disconnectVertex(*args): return _hexablock_swig.Document_disconnectVertex(*args)
    def disconnectEdges(*args): return _hexablock_swig.Document_disconnectEdges(*args)
    def replace(*args): return _hexablock_swig.Document_replace(*args)
    def mergeVertices(*args): return _hexablock_swig.Document_mergeVertices(*args)
    def mergeEdges(*args): return _hexablock_swig.Document_mergeEdges(*args)
    def mergeQuads(*args): return _hexablock_swig.Document_mergeQuads(*args)
    def clearAssociation(*args): return _hexablock_swig.Document_clearAssociation(*args)
    def associateOpenedLine(*args): return _hexablock_swig.Document_associateOpenedLine(*args)
    def associateClosedLine(*args): return _hexablock_swig.Document_associateClosedLine(*args)
    def countHexa(*args): return _hexablock_swig.Document_countHexa(*args)
    def countQuad(*args): return _hexablock_swig.Document_countQuad(*args)
    def countEdge(*args): return _hexablock_swig.Document_countEdge(*args)
    def countVertex(*args): return _hexablock_swig.Document_countVertex(*args)
    def countVector(*args): return _hexablock_swig.Document_countVector(*args)
    def countGroup(*args): return _hexablock_swig.Document_countGroup(*args)
    def countLaw(*args): return _hexablock_swig.Document_countLaw(*args)
    def countPropagation(*args): return _hexablock_swig.Document_countPropagation(*args)
    def countShape(*args): return _hexablock_swig.Document_countShape(*args)
    def countUsedHexa(*args): return _hexablock_swig.Document_countUsedHexa(*args)
    def countUsedQuad(*args): return _hexablock_swig.Document_countUsedQuad(*args)
    def countUsedEdge(*args): return _hexablock_swig.Document_countUsedEdge(*args)
    def countUsedVertex(*args): return _hexablock_swig.Document_countUsedVertex(*args)
    def getHexa(*args): return _hexablock_swig.Document_getHexa(*args)
    def getQuad(*args): return _hexablock_swig.Document_getQuad(*args)
    def getEdge(*args): return _hexablock_swig.Document_getEdge(*args)
    def getVertex(*args): return _hexablock_swig.Document_getVertex(*args)
    def getUsedHexa(*args): return _hexablock_swig.Document_getUsedHexa(*args)
    def getUsedQuad(*args): return _hexablock_swig.Document_getUsedQuad(*args)
    def getUsedEdge(*args): return _hexablock_swig.Document_getUsedEdge(*args)
    def getUsedVertex(*args): return _hexablock_swig.Document_getUsedVertex(*args)
    def getVector(*args): return _hexablock_swig.Document_getVector(*args)
    def getShape(*args): return _hexablock_swig.Document_getShape(*args)
    def getGroup(*args): return _hexablock_swig.Document_getGroup(*args)
    def getLaw(*args): return _hexablock_swig.Document_getLaw(*args)
    def getPropagation(*args): return _hexablock_swig.Document_getPropagation(*args)
    def getFirstExplicitShape(*args): return _hexablock_swig.Document_getFirstExplicitShape(*args)
    def findEdge(*args): return _hexablock_swig.Document_findEdge(*args)
    def findQuad(*args): return _hexablock_swig.Document_findQuad(*args)
    def findHexa(*args): return _hexablock_swig.Document_findHexa(*args)
    def findGroup(*args): return _hexablock_swig.Document_findGroup(*args)
    def findLaw(*args): return _hexablock_swig.Document_findLaw(*args)
    def findPropagation(*args): return _hexablock_swig.Document_findPropagation(*args)
    def removeHexa(*args): return _hexablock_swig.Document_removeHexa(*args)
    def removeQuad(*args): return _hexablock_swig.Document_removeQuad(*args)
    def removeConnectedHexa(*args): return _hexablock_swig.Document_removeConnectedHexa(*args)
    def removeElements(*args): return _hexablock_swig.Document_removeElements(*args)
    def removeGroup(*args): return _hexablock_swig.Document_removeGroup(*args)
    def removeLaw(*args): return _hexablock_swig.Document_removeLaw(*args)
    def makeCartesianTop(*args): return _hexablock_swig.Document_makeCartesianTop(*args)
    def makeCartesianUni(*args): return _hexablock_swig.Document_makeCartesianUni(*args)
    def makeCartesian(*args): return _hexablock_swig.Document_makeCartesian(*args)
    def makeCylinderTop(*args): return _hexablock_swig.Document_makeCylinderTop(*args)
    def makeCylinderUni(*args): return _hexablock_swig.Document_makeCylinderUni(*args)
    def makeCylinder(*args): return _hexablock_swig.Document_makeCylinder(*args)
    def makePipeTop(*args): return _hexablock_swig.Document_makePipeTop(*args)
    def makePipeUni(*args): return _hexablock_swig.Document_makePipeUni(*args)
    def makePipe(*args): return _hexablock_swig.Document_makePipe(*args)
    def makeSphericalTop(*args): return _hexablock_swig.Document_makeSphericalTop(*args)
    def makeSphericalUni(*args): return _hexablock_swig.Document_makeSphericalUni(*args)
    def makeSpherical(*args): return _hexablock_swig.Document_makeSpherical(*args)
    def makeSphereTop(*args): return _hexablock_swig.Document_makeSphereTop(*args)
    def makeSphereUni(*args): return _hexablock_swig.Document_makeSphereUni(*args)
    def makeSphere(*args): return _hexablock_swig.Document_makeSphere(*args)
    def makeRindTop(*args): return _hexablock_swig.Document_makeRindTop(*args)
    def makeRindUni(*args): return _hexablock_swig.Document_makeRindUni(*args)
    def makeRind(*args): return _hexablock_swig.Document_makeRind(*args)
    def makeCylinders(*args): return _hexablock_swig.Document_makeCylinders(*args)
    def makePipes(*args): return _hexablock_swig.Document_makePipes(*args)
    def extrudeQuadTop(*args): return _hexablock_swig.Document_extrudeQuadTop(*args)
    def extrudeQuadUni(*args): return _hexablock_swig.Document_extrudeQuadUni(*args)
    def extrudeQuad(*args): return _hexablock_swig.Document_extrudeQuad(*args)
    def extrudeQuadsTop(*args): return _hexablock_swig.Document_extrudeQuadsTop(*args)
    def extrudeQuadsUni(*args): return _hexablock_swig.Document_extrudeQuadsUni(*args)
    def extrudeQuads(*args): return _hexablock_swig.Document_extrudeQuads(*args)
    def revolutionQuadUni(*args): return _hexablock_swig.Document_revolutionQuadUni(*args)
    def revolutionQuad(*args): return _hexablock_swig.Document_revolutionQuad(*args)
    def revolutionQuadsUni(*args): return _hexablock_swig.Document_revolutionQuadsUni(*args)
    def revolutionQuads(*args): return _hexablock_swig.Document_revolutionQuads(*args)
    def joinQuadUni(*args): return _hexablock_swig.Document_joinQuadUni(*args)
    def joinQuadsUni(*args): return _hexablock_swig.Document_joinQuadsUni(*args)
    def joinQuad(*args): return _hexablock_swig.Document_joinQuad(*args)
    def joinQuads(*args): return _hexablock_swig.Document_joinQuads(*args)
    def cutUni(*args): return _hexablock_swig.Document_cutUni(*args)
    def cut(*args): return _hexablock_swig.Document_cut(*args)
    def addGroup(*args): return _hexablock_swig.Document_addGroup(*args)
    def isSaved(*args): return _hexablock_swig.Document_isSaved(*args)
    def appendXml(*args): return _hexablock_swig.Document_appendXml(*args)
    def getXml(*args): return _hexablock_swig.Document_getXml(*args)
    def getLevel(*args): return _hexablock_swig.Document_getLevel(*args)
    def findVertex(*args): return _hexablock_swig.Document_findVertex(*args)
    def closeQuads(*args): return _hexablock_swig.Document_closeQuads(*args)
    def addLaw(*args): return _hexablock_swig.Document_addLaw(*args)
    def checkAssociations(*args): return _hexablock_swig.Document_checkAssociations(*args)
    def addShape(*args): return _hexablock_swig.Document_addShape(*args)
    __swig_destroy__ = _hexablock_swig.delete_Document
    __del__ = lambda self : None;
Document_swigregister = _hexablock_swig.Document_swigregister
Document_swigregister(Document)

class Propagation(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Propagation, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Propagation, name)
    __repr__ = _swig_repr
    def getEdges(*args): return _hexablock_swig.Propagation_getEdges(*args)
    def getLaw(*args): return _hexablock_swig.Propagation_getLaw(*args)
    def getWay(*args): return _hexablock_swig.Propagation_getWay(*args)
    def setWay(*args): return _hexablock_swig.Propagation_setWay(*args)
    def setLaw(*args): return _hexablock_swig.Propagation_setLaw(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Propagation(*args)
        try: self.this.append(this)
        except: self.this = this
    def saveXml(*args): return _hexablock_swig.Propagation_saveXml(*args)
    def addEdge(*args): return _hexablock_swig.Propagation_addEdge(*args)
    def majLaw(*args): return _hexablock_swig.Propagation_majLaw(*args)
    __swig_destroy__ = _hexablock_swig.delete_Propagation
    __del__ = lambda self : None;
Propagation_swigregister = _hexablock_swig.Propagation_swigregister
Propagation_swigregister(Propagation)

hex_instance = _hexablock_swig.hex_instance
class Hex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hex, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _hexablock_swig.Hex_getInstance
    if _newclass:getInstance = staticmethod(_hexablock_swig.Hex_getInstance)
    def countDocument(*args): return _hexablock_swig.Hex_countDocument(*args)
    def getDocument(*args): return _hexablock_swig.Hex_getDocument(*args)
    def removeDocument(*args): return _hexablock_swig.Hex_removeDocument(*args)
    def addDocument(*args): return _hexablock_swig.Hex_addDocument(*args)
    def loadDocument(*args): return _hexablock_swig.Hex_loadDocument(*args)
    def findDocument(*args): return _hexablock_swig.Hex_findDocument(*args)
    def what(*args): return _hexablock_swig.Hex_what(*args)
    def sizeofMessage(*args): return _hexablock_swig.Hex_sizeofMessage(*args)
    def getMessageLine(*args): return _hexablock_swig.Hex_getMessageLine(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Hex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hex
    __del__ = lambda self : None;
Hex_swigregister = _hexablock_swig.Hex_swigregister
Hex_swigregister(Hex)
Hex_getInstance = _hexablock_swig.Hex_getInstance

what = _hexablock_swig.what
class Elements(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elements, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Elements, name)
    __repr__ = _swig_repr
    def getHexa(*args): return _hexablock_swig.Elements_getHexa(*args)
    def getQuad(*args): return _hexablock_swig.Elements_getQuad(*args)
    def getEdge(*args): return _hexablock_swig.Elements_getEdge(*args)
    def getVertex(*args): return _hexablock_swig.Elements_getVertex(*args)
    def getHexaIJK(*args): return _hexablock_swig.Elements_getHexaIJK(*args)
    def getQuadIJ(*args): return _hexablock_swig.Elements_getQuadIJ(*args)
    def getQuadJK(*args): return _hexablock_swig.Elements_getQuadJK(*args)
    def getQuadIK(*args): return _hexablock_swig.Elements_getQuadIK(*args)
    def getEdgeI(*args): return _hexablock_swig.Elements_getEdgeI(*args)
    def getEdgeJ(*args): return _hexablock_swig.Elements_getEdgeJ(*args)
    def getEdgeK(*args): return _hexablock_swig.Elements_getEdgeK(*args)
    def getVertexIJK(*args): return _hexablock_swig.Elements_getVertexIJK(*args)
    def countHexa(*args): return _hexablock_swig.Elements_countHexa(*args)
    def countQuad(*args): return _hexablock_swig.Elements_countQuad(*args)
    def countEdge(*args): return _hexablock_swig.Elements_countEdge(*args)
    def countVertex(*args): return _hexablock_swig.Elements_countVertex(*args)
    def nearestVertex(*args): return _hexablock_swig.Elements_nearestVertex(*args)
    def findVertex(*args): return _hexablock_swig.Elements_findVertex(*args)
    def clearAssociation(*args): return _hexablock_swig.Elements_clearAssociation(*args)
    def saveVtk(*args): return _hexablock_swig.Elements_saveVtk(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Elements(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Elements
    __del__ = lambda self : None;
Elements_swigregister = _hexablock_swig.Elements_swigregister
Elements_swigregister(Elements)

class BiCylinder(Elements):
    __swig_setmethods__ = {}
    for _s in [Elements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Elements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hexablock_swig.new_BiCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def getHexaIJK(*args): return _hexablock_swig.BiCylinder_getHexaIJK(*args)
    def getQuadIJ(*args): return _hexablock_swig.BiCylinder_getQuadIJ(*args)
    def getQuadJK(*args): return _hexablock_swig.BiCylinder_getQuadJK(*args)
    def getQuadIK(*args): return _hexablock_swig.BiCylinder_getQuadIK(*args)
    def getEdgeI(*args): return _hexablock_swig.BiCylinder_getEdgeI(*args)
    def getEdgeJ(*args): return _hexablock_swig.BiCylinder_getEdgeJ(*args)
    def getEdgeK(*args): return _hexablock_swig.BiCylinder_getEdgeK(*args)
    def getVertexIJK(*args): return _hexablock_swig.BiCylinder_getVertexIJK(*args)
    __swig_destroy__ = _hexablock_swig.delete_BiCylinder
    __del__ = lambda self : None;
BiCylinder_swigregister = _hexablock_swig.BiCylinder_swigregister
BiCylinder_swigregister(BiCylinder)

class NewShape(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewShape, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewShape, name)
    __repr__ = _swig_repr
    def countVertex(*args): return _hexablock_swig.NewShape_countVertex(*args)
    def countEdge(*args): return _hexablock_swig.NewShape_countEdge(*args)
    def countFace(*args): return _hexablock_swig.NewShape_countFace(*args)
    def getVertex(*args): return _hexablock_swig.NewShape_getVertex(*args)
    def getEdge(*args): return _hexablock_swig.NewShape_getEdge(*args)
    def getFace(*args): return _hexablock_swig.NewShape_getFace(*args)
    def getNameVertex(*args): return _hexablock_swig.NewShape_getNameVertex(*args)
    def getNameEdge(*args): return _hexablock_swig.NewShape_getNameEdge(*args)
    def getNameFace(*args): return _hexablock_swig.NewShape_getNameFace(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_NewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_NewShape
    __del__ = lambda self : None;
NewShape_swigregister = _hexablock_swig.NewShape_swigregister
NewShape_swigregister(NewShape)

class Group(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def addElement(*args): return _hexablock_swig.Group_addElement(*args)
    def countElement(*args): return _hexablock_swig.Group_countElement(*args)
    def getKind(*args): return _hexablock_swig.Group_getKind(*args)
    def clearElement(*args): return _hexablock_swig.Group_clearElement(*args)
    def removeElement(*args): return _hexablock_swig.Group_removeElement(*args)
    def getElement(*args): return _hexablock_swig.Group_getElement(*args)
    def __init__(self, *args): 
        this = _hexablock_swig.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Group
    __del__ = lambda self : None;
Group_swigregister = _hexablock_swig.Group_swigregister
Group_swigregister(Group)



