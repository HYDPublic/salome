// Copyright (C) 2007-2016  CEA/DEN, EDF R&D, OPEN CASCADE
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef __ATOMSOLV_GEN__
#define __ATOMSOLV_GEN__

#include "SALOME_Component.idl"
#include "SALOME_Exception.idl"
#include "ATOMGEN.idl"


/*!  \ingroup EXAMPLES

This package contains the interface ATOMSOLV_ORB used
for  %ATOMSOLV component as an example in %SALOME application.
*/
module ATOMSOLV_ORB
{
  /*!
    New type for Molecule with a double coefficient (temperature)
   */
  struct TMolecule
  {
    ATOMGEN_ORB::Molecule molecule;
    double temperature;
  };

  typedef sequence<TMolecule> TMoleculeList;

  /*! \brief Interface of the %ATOMSOLV component
   */
  interface ATOMSOLV_Gen : Engines::EngineComponent
  {
    /*!
      Set internal data structure from external source (ATOMGEN component, for example).
     */
    boolean setData( in long studyID, in TMoleculeList theData );

    /*!
      Get internal data structure
     */
    boolean getData( in long studyID, out TMoleculeList outData );

    /*!
      Perform action on the atomic data
     */
    boolean processData( in long studyID );
  };
};

#endif
